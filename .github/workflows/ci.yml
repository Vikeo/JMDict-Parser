name: Build and Publish

on:
  create:
    branches:
      - release/**
  push:
    branches:
      - main
      - develop
      - release/**
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SOLUTION: JMDict.sln

    steps:
      - uses: actions/checkout@v3

      - name: Get Build Version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/release/"* ]]; then
            echo "VERSION=$(echo ${GITHUB_REF#refs/heads/release/})" >> $GITHUB_ENV
          else
            echo "VERSION=1.0.0" >> $GITHUB_ENV
          fi

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.1.1

      - name: Restore dependencies
        run: nuget restore $SOLUTION

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Build
        run: dotnet build /p:Version=${{ env.VERSION }} $SOLUTION --configuration Release --no-restore

      - name: Publish
        if: startsWith(github.ref, 'refs/heads/release')
        run: |
          # Get the package filename
          PACKAGE=$(find ./bin/Release -name "*.nupkg")

          # Create the release on GitHub
          RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"tag_name": "v'"${{ env.VERSION }}"'", "name": "Release '"${{ env.VERSION }}"'", "body": "Release '"${{ env.VERSION }}"'", "draft": false, "prerelease": false}' \
              https://api.github.com/repos/${{ github.repository }}/releases)

          # Get the upload URL from the release response
          UPLOAD_URL=$(echo $RESPONSE | jq -r '.upload_url' | sed 's/{.*}//')

          # Upload the NuGet package as an asset to the release
          curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zip" \
              --data-binary "@$PACKAGE" \
              "$UPLOAD_URL?name=$(basename "$PACKAGE")"
